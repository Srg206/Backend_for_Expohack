version: "3.8"

services:
  postgres:
    container_name: fastapi-postgres-container
    image: postgres:16.2
    restart: unless-stopped
    env_file:
     - .env
    environment:
      - TZ= 'GMT+3'
      - PGTZ= 'GMT+3'
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}

    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init-db:/docker-entrypoint-initdb.d
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

    networks:
      - app-network

  main_backend:
    container_name: main_backend-container
    env_file:
     - .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}

    build:
      context: ./Backend_main_service
      dockerfile: Dockerfile
    ports:
      - "8000:8080"
    # environment:
    #   - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_NAME}
    depends_on:
      - postgres
    entrypoint: ["/app/entrypoint.sh"]
    restart: unless-stopped
    networks:
      - app-network

  python-script:
    container_name: fill_and_rerank-container
    build:
      context: ./reranking_service
      dockerfile: Dockerfile
    # environment:
    #   - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_NAME}
    env_file:
     - .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}

    depends_on:
      - postgres
      - main_backend
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
